/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: D:\codes\Cyclone_Version_Apps\cyclonev2.1\command_center\CommandData.idl
  Source: CommandData.cpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#include "CommandData.hpp"

#include <org/eclipse/cyclonedds/util/ostream_operators.hpp>

namespace CommandData
{
std::ostream& operator<<(std::ostream& os, tele_status const& rhs)
{
  (void) rhs;
  os << "[";
  os << "tele_id: " << rhs.tele_id();
  os << ", online: " << rhs.online();
  os << ", connected: " << rhs.connected();
  os << "]";
  return os;
}

std::ostream& operator<<(std::ostream& os, vehicle_status const& rhs)
{
  (void) rhs;
  os << "[";
  os << "vehicle_id: " << rhs.vehicle_id();
  os << ", online: " << rhs.online();
  os << ", connected: " << rhs.connected();
  os << "]";
  return os;
}

std::ostream& operator<<(std::ostream& os, connection_msg const& rhs)
{
  (void) rhs;
  os << "[";
  os << "tele_id: " << rhs.tele_id();
  os << ", vehicle_id: " << rhs.vehicle_id();
  os << "]";
  return os;
}

std::ostream& operator<<(std::ostream& os, vehicle_gps const& rhs)
{
  (void) rhs;
  os << "[";
  os << "vehicle_id: " << rhs.vehicle_id();
  os << ", latitude: " << rhs.latitude();
  os << ", longitude: " << rhs.longitude();
  os << ", altitude: " << rhs.altitude();
  os << "]";
  return os;
}

} //namespace CommandData

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::CommandData::tele_status>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::tele_id
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<bool>(), extensibility::ext_final, false));  //::online
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<bool>(), extensibility::ext_final, false));  //::connected

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

template<>
const propvec &get_type_props<::CommandData::vehicle_status>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::vehicle_id
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<bool>(), extensibility::ext_final, false));  //::online
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<bool>(), extensibility::ext_final, false));  //::connected

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

template<>
const propvec &get_type_props<::CommandData::connection_msg>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::tele_id
  props.push_back(entity_properties_t(1, 1, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::vehicle_id

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

template<>
const propvec &get_type_props<::CommandData::vehicle_gps>() {
  static std::mutex mtx;
  static propvec props;
  static std::atomic_bool initialized {false};
  key_endpoint keylist;
  if (initialized.load(std::memory_order_relaxed))
    return props;
  std::lock_guard<std::mutex> lock(mtx);
  if (initialized.load(std::memory_order_relaxed))
    return props;
  props.clear();

  props.push_back(entity_properties_t(0, 0, false, bit_bound::bb_unset, extensibility::ext_final));  //root
  props.push_back(entity_properties_t(1, 0, false, bit_bound::bb_unset, extensibility::ext_final, false));  //::vehicle_id
  props.push_back(entity_properties_t(1, 1, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::latitude
  props.push_back(entity_properties_t(1, 2, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::longitude
  props.push_back(entity_properties_t(1, 3, false, get_bit_bound<double>(), extensibility::ext_final, false));  //::altitude

  entity_properties_t::finish(props, keylist);
  initialized.store(true, std::memory_order_release);
  return props;
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

