/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: D:\codes\Cyclone_Version_Apps\cyclonev2.1\test_side\ControlData.idl
  Source: ControlData.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_CONTROLDATA_HPP_E59CEF13A8C41134032D9FA79029C8D2
#define DDSCXX_CONTROLDATA_HPP_E59CEF13A8C41134032D9FA79029C8D2

#include <utility>
#include <ostream>
#include <string>

namespace ControlData
{
class tele_status
{
private:
 std::string tele_id_;
 bool online_ = false;
 bool connected_ = false;

public:
  tele_status() = default;

  explicit tele_status(
    const std::string& tele_id,
    bool online,
    bool connected) :
    tele_id_(tele_id),
    online_(online),
    connected_(connected) { }

  const std::string& tele_id() const { return this->tele_id_; }
  std::string& tele_id() { return this->tele_id_; }
  void tele_id(const std::string& _val_) { this->tele_id_ = _val_; }
  void tele_id(std::string&& _val_) { this->tele_id_ = std::move(_val_); }
  bool online() const { return this->online_; }
  bool& online() { return this->online_; }
  void online(bool _val_) { this->online_ = _val_; }
  bool connected() const { return this->connected_; }
  bool& connected() { return this->connected_; }
  void connected(bool _val_) { this->connected_ = _val_; }

  bool operator==(const tele_status& _other) const
  {
    (void) _other;
    return tele_id_ == _other.tele_id_ &&
      online_ == _other.online_ &&
      connected_ == _other.connected_;
  }

  bool operator!=(const tele_status& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, tele_status const& rhs);

class vehicle_status
{
private:
 std::string vehicle_id_;
 bool online_ = false;
 bool connected_ = false;

public:
  vehicle_status() = default;

  explicit vehicle_status(
    const std::string& vehicle_id,
    bool online,
    bool connected) :
    vehicle_id_(vehicle_id),
    online_(online),
    connected_(connected) { }

  const std::string& vehicle_id() const { return this->vehicle_id_; }
  std::string& vehicle_id() { return this->vehicle_id_; }
  void vehicle_id(const std::string& _val_) { this->vehicle_id_ = _val_; }
  void vehicle_id(std::string&& _val_) { this->vehicle_id_ = std::move(_val_); }
  bool online() const { return this->online_; }
  bool& online() { return this->online_; }
  void online(bool _val_) { this->online_ = _val_; }
  bool connected() const { return this->connected_; }
  bool& connected() { return this->connected_; }
  void connected(bool _val_) { this->connected_ = _val_; }

  bool operator==(const vehicle_status& _other) const
  {
    (void) _other;
    return vehicle_id_ == _other.vehicle_id_ &&
      online_ == _other.online_ &&
      connected_ == _other.connected_;
  }

  bool operator!=(const vehicle_status& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, vehicle_status const& rhs);

class connection_msg
{
private:
 std::string tele_id_;
 std::string vehicle_id_;

public:
  connection_msg() = default;

  explicit connection_msg(
    const std::string& tele_id,
    const std::string& vehicle_id) :
    tele_id_(tele_id),
    vehicle_id_(vehicle_id) { }

  const std::string& tele_id() const { return this->tele_id_; }
  std::string& tele_id() { return this->tele_id_; }
  void tele_id(const std::string& _val_) { this->tele_id_ = _val_; }
  void tele_id(std::string&& _val_) { this->tele_id_ = std::move(_val_); }
  const std::string& vehicle_id() const { return this->vehicle_id_; }
  std::string& vehicle_id() { return this->vehicle_id_; }
  void vehicle_id(const std::string& _val_) { this->vehicle_id_ = _val_; }
  void vehicle_id(std::string&& _val_) { this->vehicle_id_ = std::move(_val_); }

  bool operator==(const connection_msg& _other) const
  {
    (void) _other;
    return tele_id_ == _other.tele_id_ &&
      vehicle_id_ == _other.vehicle_id_;
  }

  bool operator!=(const connection_msg& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, connection_msg const& rhs);

class disconnection_msg
{
private:
 std::string msg_;

public:
  disconnection_msg() = default;

  explicit disconnection_msg(
    const std::string& msg) :
    msg_(msg) { }

  const std::string& msg() const { return this->msg_; }
  std::string& msg() { return this->msg_; }
  void msg(const std::string& _val_) { this->msg_ = _val_; }
  void msg(std::string&& _val_) { this->msg_ = std::move(_val_); }

  bool operator==(const disconnection_msg& _other) const
  {
    (void) _other;
    return msg_ == _other.msg_;
  }

  bool operator!=(const disconnection_msg& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, disconnection_msg const& rhs);

} //namespace ControlData

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ControlData::tele_status>::getTypeName()
{
  return "ControlData::tele_status";
}

template <> constexpr bool TopicTraits<::ControlData::tele_status>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlData::tele_status>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::tele_status>::type_map_blob_sz() { return 298; }
template<> constexpr unsigned int TopicTraits<::ControlData::tele_status>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::tele_status>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xf5,  0x9a,  0xa2,  0x7c,  0x5a,  0x0c,  0xad, 
 0xe1,  0x14,  0x6c,  0x52,  0x0b,  0x6f,  0x2c,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x39,  0xc2,  0xcc,  0x90, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x7f,  0x46,  0x16,  0x54,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x06,  0xaa,  0x6f,  0xa8,  0x00, 
 0xa0,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa6,  0x2a,  0xea,  0xb6,  0x6b,  0x49,  0x25, 
 0xb8,  0x0f,  0x6b,  0xf0,  0x84,  0x6b,  0x73,  0x00,  0x88,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x74,  0x65,  0x6c,  0x65,  0x5f,  0x73,  0x74, 
 0x61,  0x74,  0x75,  0x73,  0x00,  0x00,  0x00,  0x00,  0x58,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00,  0x07,  0x00,  0x00,  0x00,  0x6f,  0x6e,  0x6c,  0x69, 
 0x6e,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x6e,  0x6e,  0x65,  0x63,  0x74,  0x65, 
 0x64,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xa6,  0x2a,  0xea, 
 0xb6,  0x6b,  0x49,  0x25,  0xb8,  0x0f,  0x6b,  0xf0,  0x84,  0x6b,  0x73,  0xf1,  0xf5,  0x9a,  0xa2,  0x7c, 
 0x5a,  0x0c,  0xad,  0xe1,  0x14,  0x6c,  0x52,  0x0b,  0x6f,  0x2c, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::tele_status>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xf5,  0x9a,  0xa2,  0x7c,  0x5a,  0x0c,  0xad,  0xe1,  0x14,  0x6c,  0x52, 
 0x0b,  0x6f,  0x2c,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xa6,  0x2a,  0xea,  0xb6,  0x6b,  0x49,  0x25,  0xb8,  0x0f,  0x6b,  0xf0, 
 0x84,  0x6b,  0x73,  0x00,  0x8c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::ControlData::vehicle_status>::getTypeName()
{
  return "ControlData::vehicle_status";
}

template <> constexpr bool TopicTraits<::ControlData::vehicle_status>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlData::vehicle_status>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::vehicle_status>::type_map_blob_sz() { return 302; }
template<> constexpr unsigned int TopicTraits<::ControlData::vehicle_status>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::vehicle_status>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x3d,  0x87,  0x50,  0xaa,  0xa6,  0x88,  0x55, 
 0x54,  0x78,  0x63,  0x66,  0x6f,  0x82,  0x3b,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x35,  0xec,  0x04,  0xdc, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x7f,  0x46,  0x16,  0x54,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x06,  0xaa,  0x6f,  0xa8,  0x00, 
 0xa4,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x2f,  0x5b,  0xfc,  0xd0,  0x47,  0x03,  0xfa, 
 0xeb,  0xb3,  0xf7,  0xa2,  0x42,  0x3b,  0xd7,  0x00,  0x8c,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x76,  0x65,  0x68,  0x69,  0x63,  0x6c,  0x65, 
 0x5f,  0x73,  0x74,  0x61,  0x74,  0x75,  0x73,  0x00,  0x5c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x76,  0x65,  0x68,  0x69,  0x63,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x6f,  0x6e,  0x6c,  0x69,  0x6e,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x63,  0x6f,  0x6e,  0x6e, 
 0x65,  0x63,  0x74,  0x65,  0x64,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x2f,  0x5b,  0xfc,  0xd0,  0x47,  0x03,  0xfa,  0xeb,  0xb3,  0xf7,  0xa2,  0x42,  0x3b,  0xd7,  0xf1, 
 0x3d,  0x87,  0x50,  0xaa,  0xa6,  0x88,  0x55,  0x54,  0x78,  0x63,  0x66,  0x6f,  0x82,  0x3b, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::vehicle_status>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x3d,  0x87,  0x50,  0xaa,  0xa6,  0x88,  0x55,  0x54,  0x78,  0x63,  0x66, 
 0x6f,  0x82,  0x3b,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x2f,  0x5b,  0xfc,  0xd0,  0x47,  0x03,  0xfa,  0xeb,  0xb3,  0xf7,  0xa2, 
 0x42,  0x3b,  0xd7,  0x00,  0x90,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::ControlData::connection_msg>::getTypeName()
{
  return "ControlData::connection_msg";
}

template <> constexpr bool TopicTraits<::ControlData::connection_msg>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlData::connection_msg>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::connection_msg>::type_map_blob_sz() { return 258; }
template<> constexpr unsigned int TopicTraits<::ControlData::connection_msg>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::connection_msg>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x4c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xd9,  0x25,  0x08,  0x34,  0xfc,  0x0f,  0x39, 
 0xd0,  0x93,  0xe0,  0x92,  0x8b,  0xe3,  0x90,  0x00,  0x34,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x39,  0xc2,  0xcc,  0x90, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x35,  0xec,  0x04,  0xdc, 
 0x85,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x90,  0x2e,  0xe7,  0x37,  0x38,  0x01,  0xd9, 
 0x5e,  0x89,  0x5f,  0xd7,  0x7a,  0x0a,  0x42,  0x00,  0x6d,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x63,  0x6f,  0x6e,  0x6e,  0x65,  0x63,  0x74, 
 0x69,  0x6f,  0x6e,  0x5f,  0x6d,  0x73,  0x67,  0x00,  0x3d,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x76,  0x65,  0x68,  0x69, 
 0x63,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x90,  0x2e,  0xe7,  0x37,  0x38,  0x01,  0xd9,  0x5e,  0x89,  0x5f,  0xd7, 
 0x7a,  0x0a,  0x42,  0xf1,  0xd9,  0x25,  0x08,  0x34,  0xfc,  0x0f,  0x39,  0xd0,  0x93,  0xe0,  0x92,  0x8b, 
 0xe3,  0x90, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::connection_msg>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xd9,  0x25,  0x08,  0x34,  0xfc,  0x0f,  0x39,  0xd0,  0x93,  0xe0,  0x92, 
 0x8b,  0xe3,  0x90,  0x00,  0x38,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x90,  0x2e,  0xe7,  0x37,  0x38,  0x01,  0xd9,  0x5e,  0x89,  0x5f,  0xd7, 
 0x7a,  0x0a,  0x42,  0x00,  0x71,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::ControlData::disconnection_msg>::getTypeName()
{
  return "ControlData::disconnection_msg";
}

template <> constexpr bool TopicTraits<::ControlData::disconnection_msg>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlData::disconnection_msg>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::disconnection_msg>::type_map_blob_sz() { return 210; }
template<> constexpr unsigned int TopicTraits<::ControlData::disconnection_msg>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::disconnection_msg>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x3c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x81,  0x93,  0xa9,  0xae,  0xf6,  0x87,  0x18, 
 0x36,  0xf6,  0xed,  0xa1,  0xff,  0x01,  0x36,  0x00,  0x24,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x6e,  0x2b,  0xaa,  0xf3, 
 0x66,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xf6,  0x72,  0x39,  0x3e,  0xf3,  0x88,  0xc2, 
 0x96,  0x19,  0xbf,  0x94,  0xde,  0x34,  0xae,  0x00,  0x4e,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x64,  0x69,  0x73,  0x63,  0x6f,  0x6e,  0x6e, 
 0x65,  0x63,  0x74,  0x69,  0x6f,  0x6e,  0x5f,  0x6d,  0x73,  0x67,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x6d,  0x73,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0xf6,  0x72,  0x39,  0x3e,  0xf3,  0x88,  0xc2,  0x96,  0x19,  0xbf,  0x94, 
 0xde,  0x34,  0xae,  0xf1,  0x81,  0x93,  0xa9,  0xae,  0xf6,  0x87,  0x18,  0x36,  0xf6,  0xed,  0xa1,  0xff, 
 0x01,  0x36, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::disconnection_msg>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x81,  0x93,  0xa9,  0xae,  0xf6,  0x87,  0x18,  0x36,  0xf6,  0xed,  0xa1, 
 0xff,  0x01,  0x36,  0x00,  0x28,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xf6,  0x72,  0x39,  0x3e,  0xf3,  0x88,  0xc2,  0x96,  0x19,  0xbf,  0x94, 
 0xde,  0x34,  0xae,  0x00,  0x52,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ControlData::tele_status>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::tele_status>::getTypeName();
    }
};

template <>
struct topic_type_name<::ControlData::vehicle_status>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::vehicle_status>::getTypeName();
    }
};

template <>
struct topic_type_name<::ControlData::connection_msg>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::connection_msg>::getTypeName();
    }
};

template <>
struct topic_type_name<::ControlData::disconnection_msg>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::disconnection_msg>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ControlData::tele_status)
REGISTER_TOPIC_TYPE(::ControlData::vehicle_status)
REGISTER_TOPIC_TYPE(::ControlData::connection_msg)
REGISTER_TOPIC_TYPE(::ControlData::disconnection_msg)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::ControlData::tele_status>();

namespace {
  static const volatile propvec &properties___ControlData__tele_status = get_type_props<::ControlData::tele_status>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::tele_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::tele_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::tele_status>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::tele_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::tele_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::tele_status>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::tele_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::tele_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::tele_status>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::tele_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::tele_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::tele_status>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::ControlData::vehicle_status>();

namespace {
  static const volatile propvec &properties___ControlData__vehicle_status = get_type_props<::ControlData::vehicle_status>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::vehicle_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::vehicle_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::vehicle_status>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::vehicle_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::vehicle_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::vehicle_status>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::vehicle_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::vehicle_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::vehicle_status>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::vehicle_status& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.online()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.connected()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::vehicle_status& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::vehicle_status>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::ControlData::connection_msg>();

namespace {
  static const volatile propvec &properties___ControlData__connection_msg = get_type_props<::ControlData::connection_msg>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::connection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::connection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::connection_msg>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::connection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::connection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::connection_msg>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::connection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::connection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::connection_msg>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::connection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::connection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::connection_msg>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::ControlData::disconnection_msg>();

namespace {
  static const volatile propvec &properties___ControlData__disconnection_msg = get_type_props<::ControlData::disconnection_msg>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::disconnection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.msg(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::disconnection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::disconnection_msg>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::disconnection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.msg(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::disconnection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::disconnection_msg>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::disconnection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.msg(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::disconnection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::disconnection_msg>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::disconnection_msg& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.msg(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::disconnection_msg& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::disconnection_msg>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_CONTROLDATA_HPP_E59CEF13A8C41134032D9FA79029C8D2
