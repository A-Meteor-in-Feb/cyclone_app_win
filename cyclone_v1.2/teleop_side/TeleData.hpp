/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: D:\codes\Cyclone_Version_Apps\cyclone_v1.1\teleop_side\TeleData.idl
  Source: TeleData.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_TELEDATA_HPP_00DC23D497D9EA71D62ED9B9F307FB71
#define DDSCXX_TELEDATA_HPP_00DC23D497D9EA71D62ED9B9F307FB71

#include <utility>
#include <ostream>
#include <cstdint>
#include <vector>
#include <string>

namespace TeleData
{
class steeringWheel_data
{
private:
 std::string tele_id_;
 int32_t lX_ = 0;
 int32_t lY_ = 0;
 int32_t lRz_ = 0;
 int32_t rglSlider_0_ = 0;
 uint32_t buttons_ = 0;

public:
  steeringWheel_data() = default;

  explicit steeringWheel_data(
    const std::string& tele_id,
    int32_t lX,
    int32_t lY,
    int32_t lRz,
    int32_t rglSlider_0,
    uint32_t buttons) :
    tele_id_(tele_id),
    lX_(lX),
    lY_(lY),
    lRz_(lRz),
    rglSlider_0_(rglSlider_0),
    buttons_(buttons) { }

  const std::string& tele_id() const { return this->tele_id_; }
  std::string& tele_id() { return this->tele_id_; }
  void tele_id(const std::string& _val_) { this->tele_id_ = _val_; }
  void tele_id(std::string&& _val_) { this->tele_id_ = std::move(_val_); }
  int32_t lX() const { return this->lX_; }
  int32_t& lX() { return this->lX_; }
  void lX(int32_t _val_) { this->lX_ = _val_; }
  int32_t lY() const { return this->lY_; }
  int32_t& lY() { return this->lY_; }
  void lY(int32_t _val_) { this->lY_ = _val_; }
  int32_t lRz() const { return this->lRz_; }
  int32_t& lRz() { return this->lRz_; }
  void lRz(int32_t _val_) { this->lRz_ = _val_; }
  int32_t rglSlider_0() const { return this->rglSlider_0_; }
  int32_t& rglSlider_0() { return this->rglSlider_0_; }
  void rglSlider_0(int32_t _val_) { this->rglSlider_0_ = _val_; }
  uint32_t buttons() const { return this->buttons_; }
  uint32_t& buttons() { return this->buttons_; }
  void buttons(uint32_t _val_) { this->buttons_ = _val_; }

  bool operator==(const steeringWheel_data& _other) const
  {
    (void) _other;
    return tele_id_ == _other.tele_id_ &&
      lX_ == _other.lX_ &&
      lY_ == _other.lY_ &&
      lRz_ == _other.lRz_ &&
      rglSlider_0_ == _other.rglSlider_0_ &&
      buttons_ == _other.buttons_;
  }

  bool operator!=(const steeringWheel_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, steeringWheel_data const& rhs);

class joyStick_data
{
private:
 std::string tele_id_;
 int32_t lX_ = 0;
 int32_t lZ_ = 0;
 int32_t lRx_ = 0;
 int32_t lRy_ = 0;
 int32_t lRz_ = 0;
 uint32_t buttons_ = 0;
 std::vector<int32_t> rglSlider_;

public:
  joyStick_data() = default;

  explicit joyStick_data(
    const std::string& tele_id,
    int32_t lX,
    int32_t lZ,
    int32_t lRx,
    int32_t lRy,
    int32_t lRz,
    uint32_t buttons,
    const std::vector<int32_t>& rglSlider) :
    tele_id_(tele_id),
    lX_(lX),
    lZ_(lZ),
    lRx_(lRx),
    lRy_(lRy),
    lRz_(lRz),
    buttons_(buttons),
    rglSlider_(rglSlider) { }

  const std::string& tele_id() const { return this->tele_id_; }
  std::string& tele_id() { return this->tele_id_; }
  void tele_id(const std::string& _val_) { this->tele_id_ = _val_; }
  void tele_id(std::string&& _val_) { this->tele_id_ = std::move(_val_); }
  int32_t lX() const { return this->lX_; }
  int32_t& lX() { return this->lX_; }
  void lX(int32_t _val_) { this->lX_ = _val_; }
  int32_t lZ() const { return this->lZ_; }
  int32_t& lZ() { return this->lZ_; }
  void lZ(int32_t _val_) { this->lZ_ = _val_; }
  int32_t lRx() const { return this->lRx_; }
  int32_t& lRx() { return this->lRx_; }
  void lRx(int32_t _val_) { this->lRx_ = _val_; }
  int32_t lRy() const { return this->lRy_; }
  int32_t& lRy() { return this->lRy_; }
  void lRy(int32_t _val_) { this->lRy_ = _val_; }
  int32_t lRz() const { return this->lRz_; }
  int32_t& lRz() { return this->lRz_; }
  void lRz(int32_t _val_) { this->lRz_ = _val_; }
  uint32_t buttons() const { return this->buttons_; }
  uint32_t& buttons() { return this->buttons_; }
  void buttons(uint32_t _val_) { this->buttons_ = _val_; }
  const std::vector<int32_t>& rglSlider() const { return this->rglSlider_; }
  std::vector<int32_t>& rglSlider() { return this->rglSlider_; }
  void rglSlider(const std::vector<int32_t>& _val_) { this->rglSlider_ = _val_; }
  void rglSlider(std::vector<int32_t>&& _val_) { this->rglSlider_ = std::move(_val_); }

  bool operator==(const joyStick_data& _other) const
  {
    (void) _other;
    return tele_id_ == _other.tele_id_ &&
      lX_ == _other.lX_ &&
      lZ_ == _other.lZ_ &&
      lRx_ == _other.lRx_ &&
      lRy_ == _other.lRy_ &&
      lRz_ == _other.lRz_ &&
      buttons_ == _other.buttons_ &&
      rglSlider_ == _other.rglSlider_;
  }

  bool operator!=(const joyStick_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, joyStick_data const& rhs);

class streamdeck_buttons_data
{
private:
 int16_t buttons_ = 0;

public:
  streamdeck_buttons_data() = default;

  explicit streamdeck_buttons_data(
    int16_t buttons) :
    buttons_(buttons) { }

  int16_t buttons() const { return this->buttons_; }
  int16_t& buttons() { return this->buttons_; }
  void buttons(int16_t _val_) { this->buttons_ = _val_; }

  bool operator==(const streamdeck_buttons_data& _other) const
  {
    (void) _other;
    return buttons_ == _other.buttons_;
  }

  bool operator!=(const streamdeck_buttons_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, streamdeck_buttons_data const& rhs);

class statistic_data
{
private:
 double height_ = 0.0;
 double depth_ = 0.0;
 int16_t auto_flag_ = 0;

public:
  statistic_data() = default;

  explicit statistic_data(
    double height,
    double depth,
    int16_t auto_flag) :
    height_(height),
    depth_(depth),
    auto_flag_(auto_flag) { }

  double height() const { return this->height_; }
  double& height() { return this->height_; }
  void height(double _val_) { this->height_ = _val_; }
  double depth() const { return this->depth_; }
  double& depth() { return this->depth_; }
  void depth(double _val_) { this->depth_ = _val_; }
  int16_t auto_flag() const { return this->auto_flag_; }
  int16_t& auto_flag() { return this->auto_flag_; }
  void auto_flag(int16_t _val_) { this->auto_flag_ = _val_; }

  bool operator==(const statistic_data& _other) const
  {
    (void) _other;
    return height_ == _other.height_ &&
      depth_ == _other.depth_ &&
      auto_flag_ == _other.auto_flag_;
  }

  bool operator!=(const statistic_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, statistic_data const& rhs);

class imu_data
{
private:
 std::string vehicle_id_;
 std::vector<double> acc_;
 std::vector<double> gyro_;
 std::vector<double> angle_;
 std::vector<double> msg_;

public:
  imu_data() = default;

  explicit imu_data(
    const std::string& vehicle_id,
    const std::vector<double>& acc,
    const std::vector<double>& gyro,
    const std::vector<double>& angle,
    const std::vector<double>& msg) :
    vehicle_id_(vehicle_id),
    acc_(acc),
    gyro_(gyro),
    angle_(angle),
    msg_(msg) { }

  const std::string& vehicle_id() const { return this->vehicle_id_; }
  std::string& vehicle_id() { return this->vehicle_id_; }
  void vehicle_id(const std::string& _val_) { this->vehicle_id_ = _val_; }
  void vehicle_id(std::string&& _val_) { this->vehicle_id_ = std::move(_val_); }
  const std::vector<double>& acc() const { return this->acc_; }
  std::vector<double>& acc() { return this->acc_; }
  void acc(const std::vector<double>& _val_) { this->acc_ = _val_; }
  void acc(std::vector<double>&& _val_) { this->acc_ = std::move(_val_); }
  const std::vector<double>& gyro() const { return this->gyro_; }
  std::vector<double>& gyro() { return this->gyro_; }
  void gyro(const std::vector<double>& _val_) { this->gyro_ = _val_; }
  void gyro(std::vector<double>&& _val_) { this->gyro_ = std::move(_val_); }
  const std::vector<double>& angle() const { return this->angle_; }
  std::vector<double>& angle() { return this->angle_; }
  void angle(const std::vector<double>& _val_) { this->angle_ = _val_; }
  void angle(std::vector<double>&& _val_) { this->angle_ = std::move(_val_); }
  const std::vector<double>& msg() const { return this->msg_; }
  std::vector<double>& msg() { return this->msg_; }
  void msg(const std::vector<double>& _val_) { this->msg_ = _val_; }
  void msg(std::vector<double>&& _val_) { this->msg_ = std::move(_val_); }

  bool operator==(const imu_data& _other) const
  {
    (void) _other;
    return vehicle_id_ == _other.vehicle_id_ &&
      acc_ == _other.acc_ &&
      gyro_ == _other.gyro_ &&
      angle_ == _other.angle_ &&
      msg_ == _other.msg_;
  }

  bool operator!=(const imu_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, imu_data const& rhs);

} //namespace TeleData

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::TeleData::steeringWheel_data>::getTypeName()
{
  return "TeleData::steeringWheel_data";
}

template <> constexpr bool TopicTraits<::TeleData::steeringWheel_data>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::TeleData::steeringWheel_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::TeleData::steeringWheel_data>::type_map_blob_sz() { return 426; }
template<> constexpr unsigned int TopicTraits<::TeleData::steeringWheel_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TeleData::steeringWheel_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xce,  0xd1,  0x79,  0x0a,  0x58,  0xfe,  0xfb, 
 0x2d,  0xc6,  0xf9,  0x2f,  0xf2,  0xba,  0x6f,  0x00,  0x73,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x63,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x39,  0xc2,  0xcc,  0x90, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xfe,  0x13,  0x05,  0x4a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x1c,  0xfe,  0x42,  0x9f,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x25,  0xa7,  0x95,  0x7d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xba,  0x7a,  0xae,  0xc2,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x02,  0x63,  0x4e,  0xff,  0x00, 
 0xee,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x5d,  0x61,  0xbd,  0x14,  0x5b,  0x06, 
 0xd3,  0x73,  0x94,  0x00,  0x21,  0x46,  0xd8,  0x00,  0xd6,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x54,  0x65,  0x6c,  0x65, 
 0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x73,  0x74,  0x65,  0x65,  0x72,  0x69,  0x6e,  0x67,  0x57,  0x68, 
 0x65,  0x65,  0x6c,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0xa2,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x6c,  0x58,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6c,  0x59,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x6c,  0x52,  0x7a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x72,  0x67,  0x6c,  0x53,  0x6c,  0x69,  0x64,  0x65, 
 0x72,  0x5f,  0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x5d,  0x61, 
 0xbd,  0x14,  0x5b,  0x06,  0xd3,  0x73,  0x94,  0x00,  0x21,  0x46,  0xd8,  0xf1,  0xce,  0xd1,  0x79,  0x0a, 
 0x58,  0xfe,  0xfb,  0x2d,  0xc6,  0xf9,  0x2f,  0xf2,  0xba,  0x6f, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TeleData::steeringWheel_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xce,  0xd1,  0x79,  0x0a,  0x58,  0xfe,  0xfb,  0x2d,  0xc6,  0xf9,  0x2f, 
 0xf2,  0xba,  0x6f,  0x00,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x5d,  0x61,  0xbd,  0x14,  0x5b,  0x06,  0xd3,  0x73,  0x94,  0x00, 
 0x21,  0x46,  0xd8,  0x00,  0xda,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::TeleData::joyStick_data>::getTypeName()
{
  return "TeleData::joyStick_data";
}

template <> constexpr bool TopicTraits<::TeleData::joyStick_data>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::TeleData::joyStick_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::TeleData::joyStick_data>::type_map_blob_sz() { return 502; }
template<> constexpr unsigned int TopicTraits<::TeleData::joyStick_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TeleData::joyStick_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0xb0,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x3e,  0x13,  0xb0,  0x1d,  0x1c,  0xe8,  0x68, 
 0x69,  0xb6,  0x6b,  0x29,  0x09,  0x5b,  0x44,  0x00,  0x98,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x88,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x39,  0xc2,  0xcc,  0x90, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xfe,  0x13,  0x05,  0x4a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xc8,  0x8d,  0x8d,  0x80,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x29,  0xe0,  0x03,  0xa7,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x23,  0x3d,  0xb4,  0x19,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x25,  0xa7,  0x95,  0x7d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x02,  0x63,  0x4e,  0xff,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x02,  0x04, 
 0x11,  0x70,  0xab,  0xfb,  0x18,  0x01,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x64,  0x26,  0xca, 
 0x28,  0xe9,  0xfe,  0xdd,  0x7b,  0xf0,  0x51,  0x45,  0x16,  0x69,  0xda,  0x00,  0x00,  0x01,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x20,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00, 
 0x54,  0x65,  0x6c,  0x65,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x6a,  0x6f,  0x79,  0x53,  0x74,  0x69, 
 0x63,  0x6b,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0xd4,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6c,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6c,  0x58,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x6c,  0x5a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x6c,  0x52,  0x78,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x6c,  0x52,  0x79,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x6c,  0x52,  0x7a,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1c,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x02,  0x04, 
 0x0a,  0x00,  0x00,  0x00,  0x72,  0x67,  0x6c,  0x53,  0x6c,  0x69,  0x64,  0x65,  0x72,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x64,  0x26,  0xca,  0x28,  0xe9,  0xfe,  0xdd, 
 0x7b,  0xf0,  0x51,  0x45,  0x16,  0x69,  0xda,  0xf1,  0x3e,  0x13,  0xb0,  0x1d,  0x1c,  0xe8,  0x68,  0x69, 
 0xb6,  0x6b,  0x29,  0x09,  0x5b,  0x44, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TeleData::joyStick_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x3e,  0x13,  0xb0,  0x1d,  0x1c,  0xe8,  0x68,  0x69,  0xb6,  0x6b,  0x29, 
 0x09,  0x5b,  0x44,  0x00,  0x9c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x64,  0x26,  0xca,  0x28,  0xe9,  0xfe,  0xdd,  0x7b,  0xf0,  0x51,  0x45, 
 0x16,  0x69,  0xda,  0x00,  0x04,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::TeleData::streamdeck_buttons_data>::getTypeName()
{
  return "TeleData::streamdeck_buttons_data";
}

template <> constexpr bool TopicTraits<::TeleData::streamdeck_buttons_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::TeleData::streamdeck_buttons_data>::type_map_blob_sz() { return 218; }
template<> constexpr unsigned int TopicTraits<::TeleData::streamdeck_buttons_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TeleData::streamdeck_buttons_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x3b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x2f,  0xd1,  0x07,  0x6e,  0x73,  0x55,  0x94, 
 0xba,  0x9d,  0x00,  0xd3,  0x40,  0xe7,  0x37,  0x00,  0x23,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x02,  0x63,  0x4e,  0xff,  0x00, 
 0x6e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x0a,  0x4e,  0x3b,  0xcd,  0xaa,  0xae,  0x43, 
 0x7d,  0x81,  0x60,  0x85,  0x23,  0x95,  0xd3,  0x00,  0x56,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x54,  0x65,  0x6c,  0x65, 
 0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x73,  0x74,  0x72,  0x65,  0x61,  0x6d,  0x64,  0x65,  0x63,  0x6b, 
 0x5f,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x03,  0x00,  0x08,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x0a,  0x4e,  0x3b, 
 0xcd,  0xaa,  0xae,  0x43,  0x7d,  0x81,  0x60,  0x85,  0x23,  0x95,  0xd3,  0xf1,  0x2f,  0xd1,  0x07,  0x6e, 
 0x73,  0x55,  0x94,  0xba,  0x9d,  0x00,  0xd3,  0x40,  0xe7,  0x37, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TeleData::streamdeck_buttons_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x2f,  0xd1,  0x07,  0x6e,  0x73,  0x55,  0x94,  0xba,  0x9d,  0x00,  0xd3, 
 0x40,  0xe7,  0x37,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x0a,  0x4e,  0x3b,  0xcd,  0xaa,  0xae,  0x43,  0x7d,  0x81,  0x60,  0x85, 
 0x23,  0x95,  0xd3,  0x00,  0x5a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::TeleData::statistic_data>::getTypeName()
{
  return "TeleData::statistic_data";
}

template <> constexpr bool TopicTraits<::TeleData::statistic_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::TeleData::statistic_data>::type_map_blob_sz() { return 294; }
template<> constexpr unsigned int TopicTraits<::TeleData::statistic_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TeleData::statistic_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x5b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x7d,  0x13,  0x6f,  0x8b,  0x4d,  0x5b,  0xe2, 
 0xa6,  0x5d,  0xd6,  0x3b,  0xbe,  0x5c,  0x52,  0x00,  0x43,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x33,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0xb4,  0x35,  0xe2,  0x27,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x12,  0xa0,  0x55,  0xbf,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0xe5,  0x18,  0xcd,  0x48,  0x00, 
 0x9c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x63,  0x64,  0x20,  0x5b,  0x65,  0x96,  0x46, 
 0x8d,  0xe6,  0x56,  0xf7,  0x6e,  0x66,  0x1c,  0x00,  0x84,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x21,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x54,  0x65,  0x6c,  0x65, 
 0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x73,  0x74,  0x61,  0x74,  0x69,  0x73,  0x74,  0x69,  0x63,  0x5f, 
 0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x15,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x68,  0x65,  0x69,  0x67,  0x68,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x0a,  0x00,  0x06,  0x00,  0x00,  0x00,  0x64,  0x65,  0x70,  0x74, 
 0x68,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x03,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x61,  0x75,  0x74,  0x6f,  0x5f,  0x66,  0x6c,  0x61,  0x67,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x63,  0x64,  0x20,  0x5b,  0x65,  0x96,  0x46, 
 0x8d,  0xe6,  0x56,  0xf7,  0x6e,  0x66,  0x1c,  0xf1,  0x7d,  0x13,  0x6f,  0x8b,  0x4d,  0x5b,  0xe2,  0xa6, 
 0x5d,  0xd6,  0x3b,  0xbe,  0x5c,  0x52, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TeleData::statistic_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x7d,  0x13,  0x6f,  0x8b,  0x4d,  0x5b,  0xe2,  0xa6,  0x5d,  0xd6,  0x3b, 
 0xbe,  0x5c,  0x52,  0x00,  0x47,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x63,  0x64,  0x20,  0x5b,  0x65,  0x96,  0x46,  0x8d,  0xe6,  0x56,  0xf7, 
 0x6e,  0x66,  0x1c,  0x00,  0x88,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

template <> constexpr const char* TopicTraits<::TeleData::imu_data>::getTypeName()
{
  return "TeleData::imu_data";
}

template <> constexpr bool TopicTraits<::TeleData::imu_data>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::TeleData::imu_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::TeleData::imu_data>::type_map_blob_sz() { return 398; }
template<> constexpr unsigned int TopicTraits<::TeleData::imu_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::TeleData::imu_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x8c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xe7,  0x02,  0xe7,  0xae,  0x40,  0x55,  0xc1, 
 0xca,  0xbe,  0xaf,  0xa4,  0xa3,  0x18,  0x9e,  0x00,  0x74,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x35,  0xec,  0x04,  0xdc, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a, 
 0x16,  0x73,  0x44,  0x8e,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x03,  0x0a,  0x41,  0xe1,  0xdb,  0x58,  0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x89,  0x91,  0x86,  0xf7,  0x10,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x6e,  0x2b,  0xaa,  0xf3, 
 0xd2,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x7a,  0x0d,  0xec,  0xc1,  0x2f,  0xe6,  0xc4, 
 0x3f,  0x9d,  0x55,  0xb2,  0x35,  0x2e,  0x6c,  0x00,  0xba,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x54,  0x65,  0x6c,  0x65, 
 0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x69,  0x6d,  0x75,  0x5f,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00, 
 0x92,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x70,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x76,  0x65,  0x68,  0x69,  0x63,  0x6c,  0x65,  0x5f, 
 0x69,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x04,  0x00,  0x00,  0x00,  0x61,  0x63,  0x63,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x03,  0x0a,  0x05,  0x00,  0x00,  0x00,  0x67,  0x79,  0x72,  0x6f,  0x00,  0x00,  0x00,  0x00, 
 0x18,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a, 
 0x06,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x6c,  0x65,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x04,  0x00,  0x00,  0x00, 
 0x6d,  0x73,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0xf2,  0x7a,  0x0d,  0xec,  0xc1,  0x2f,  0xe6,  0xc4,  0x3f,  0x9d,  0x55,  0xb2,  0x35,  0x2e,  0x6c,  0xf1, 
 0xe7,  0x02,  0xe7,  0xae,  0x40,  0x55,  0xc1,  0xca,  0xbe,  0xaf,  0xa4,  0xa3,  0x18,  0x9e, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::TeleData::imu_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xe7,  0x02,  0xe7,  0xae,  0x40,  0x55,  0xc1,  0xca,  0xbe,  0xaf,  0xa4, 
 0xa3,  0x18,  0x9e,  0x00,  0x78,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x7a,  0x0d,  0xec,  0xc1,  0x2f,  0xe6,  0xc4,  0x3f,  0x9d,  0x55,  0xb2, 
 0x35,  0x2e,  0x6c,  0x00,  0xbe,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::TeleData::steeringWheel_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TeleData::steeringWheel_data>::getTypeName();
    }
};

template <>
struct topic_type_name<::TeleData::joyStick_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TeleData::joyStick_data>::getTypeName();
    }
};

template <>
struct topic_type_name<::TeleData::streamdeck_buttons_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TeleData::streamdeck_buttons_data>::getTypeName();
    }
};

template <>
struct topic_type_name<::TeleData::statistic_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TeleData::statistic_data>::getTypeName();
    }
};

template <>
struct topic_type_name<::TeleData::imu_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::TeleData::imu_data>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::TeleData::steeringWheel_data)
REGISTER_TOPIC_TYPE(::TeleData::joyStick_data)
REGISTER_TOPIC_TYPE(::TeleData::streamdeck_buttons_data)
REGISTER_TOPIC_TYPE(::TeleData::statistic_data)
REGISTER_TOPIC_TYPE(::TeleData::imu_data)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::TeleData::steeringWheel_data>();

namespace {
  static const volatile propvec &properties___TeleData__steeringWheel_data = get_type_props<::TeleData::steeringWheel_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TeleData::steeringWheel_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TeleData::steeringWheel_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::steeringWheel_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TeleData::steeringWheel_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TeleData::steeringWheel_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::steeringWheel_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TeleData::steeringWheel_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TeleData::steeringWheel_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::steeringWheel_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TeleData::steeringWheel_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TeleData::steeringWheel_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::steeringWheel_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::TeleData::joyStick_data>();

namespace {
  static const volatile propvec &properties___TeleData__joyStick_data = get_type_props<::TeleData::joyStick_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TeleData::joyStick_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lZ()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRx()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRy()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.rglSlider().size());
      if (se_1 > 2 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.rglSlider()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TeleData::joyStick_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::joyStick_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TeleData::joyStick_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lZ()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRx()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRy()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.rglSlider().size());
      if (se_1 > 2 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.rglSlider().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.rglSlider()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TeleData::joyStick_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::joyStick_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TeleData::joyStick_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lZ()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRx()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRy()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.rglSlider().size());
      if (se_1 > 2 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, int32_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TeleData::joyStick_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::joyStick_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TeleData::joyStick_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.tele_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lZ()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRx()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRy()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 2;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, int32_t(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TeleData::joyStick_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::joyStick_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::TeleData::streamdeck_buttons_data>();

namespace {
  static const volatile propvec &properties___TeleData__streamdeck_buttons_data = get_type_props<::TeleData::streamdeck_buttons_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TeleData::streamdeck_buttons_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TeleData::streamdeck_buttons_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::streamdeck_buttons_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TeleData::streamdeck_buttons_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TeleData::streamdeck_buttons_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::streamdeck_buttons_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TeleData::streamdeck_buttons_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TeleData::streamdeck_buttons_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::streamdeck_buttons_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TeleData::streamdeck_buttons_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TeleData::streamdeck_buttons_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::streamdeck_buttons_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::TeleData::statistic_data>();

namespace {
  static const volatile propvec &properties___TeleData__statistic_data = get_type_props<::TeleData::statistic_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TeleData::statistic_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.depth()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.auto_flag()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TeleData::statistic_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::statistic_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TeleData::statistic_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.depth()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.auto_flag()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TeleData::statistic_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::statistic_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TeleData::statistic_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.depth()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.auto_flag()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TeleData::statistic_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::statistic_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TeleData::statistic_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.height()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.depth()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.auto_flag()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TeleData::statistic_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::statistic_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

template<>
const propvec &get_type_props<::TeleData::imu_data>();

namespace {
  static const volatile propvec &properties___TeleData__imu_data = get_type_props<::TeleData::imu_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::TeleData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.acc()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.gyro()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.angle()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.msg()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::TeleData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::TeleData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.acc().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.acc()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.gyro().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.gyro()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.angle().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.angle()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.msg().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.msg()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::TeleData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::TeleData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::TeleData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::TeleData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max_string(streamer, instance.vehicle_id(), 0))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::TeleData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::TeleData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_TELEDATA_HPP_00DC23D497D9EA71D62ED9B9F307FB71
