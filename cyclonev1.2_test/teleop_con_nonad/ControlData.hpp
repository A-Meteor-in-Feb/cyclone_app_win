/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: D:\codes\Cyclone_Version_Apps\cyclonev1.2_test\teleop_con_nonad\ControlData.idl
  Source: ControlData.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_CONTROLDATA_HPP_7F732FB4553D99B56CE9F3E6F6780AE3
#define DDSCXX_CONTROLDATA_HPP_7F732FB4553D99B56CE9F3E6F6780AE3

#include <utility>
#include <ostream>
#include <cstdint>

namespace ControlData
{
class steeringWheel
{
private:
 int32_t lX_ = 0;
 int32_t lY_ = 0;
 int32_t lRz_ = 0;
 int32_t rglSlider_0_ = 0;
 uint32_t buttons_ = 0;

public:
  steeringWheel() = default;

  explicit steeringWheel(
    int32_t lX,
    int32_t lY,
    int32_t lRz,
    int32_t rglSlider_0,
    uint32_t buttons) :
    lX_(lX),
    lY_(lY),
    lRz_(lRz),
    rglSlider_0_(rglSlider_0),
    buttons_(buttons) { }

  int32_t lX() const { return this->lX_; }
  int32_t& lX() { return this->lX_; }
  void lX(int32_t _val_) { this->lX_ = _val_; }
  int32_t lY() const { return this->lY_; }
  int32_t& lY() { return this->lY_; }
  void lY(int32_t _val_) { this->lY_ = _val_; }
  int32_t lRz() const { return this->lRz_; }
  int32_t& lRz() { return this->lRz_; }
  void lRz(int32_t _val_) { this->lRz_ = _val_; }
  int32_t rglSlider_0() const { return this->rglSlider_0_; }
  int32_t& rglSlider_0() { return this->rglSlider_0_; }
  void rglSlider_0(int32_t _val_) { this->rglSlider_0_ = _val_; }
  uint32_t buttons() const { return this->buttons_; }
  uint32_t& buttons() { return this->buttons_; }
  void buttons(uint32_t _val_) { this->buttons_ = _val_; }

  bool operator==(const steeringWheel& _other) const
  {
    (void) _other;
    return lX_ == _other.lX_ &&
      lY_ == _other.lY_ &&
      lRz_ == _other.lRz_ &&
      rglSlider_0_ == _other.rglSlider_0_ &&
      buttons_ == _other.buttons_;
  }

  bool operator!=(const steeringWheel& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, steeringWheel const& rhs);

} //namespace ControlData

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ControlData::steeringWheel>::getTypeName()
{
  return "ControlData::steeringWheel";
}

template <> constexpr bool TopicTraits<::ControlData::steeringWheel>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::steeringWheel>::type_map_blob_sz() { return 378; }
template<> constexpr unsigned int TopicTraits<::ControlData::steeringWheel>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::steeringWheel>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x7b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0xaf,  0x2b,  0xf3,  0x5f,  0x7e,  0x10,  0xe0, 
 0x46,  0x3b,  0xe3,  0x5f,  0x4f,  0xdb,  0x08,  0x00,  0x63,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x53,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xfe,  0x13,  0x05,  0x4a,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x1c,  0xfe,  0x42,  0x9f,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x25,  0xa7,  0x95,  0x7d,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0xba,  0x7a,  0xae,  0xc2,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x02,  0x63,  0x4e,  0xff,  0x00, 
 0xce,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x82,  0xc6,  0x0c,  0xe4,  0x12,  0xe7,  0x0d, 
 0x4d,  0x43,  0x78,  0x73,  0xdd,  0xc5,  0xc9,  0x00,  0xb6,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x73,  0x74,  0x65,  0x65,  0x72,  0x69,  0x6e, 
 0x67,  0x57,  0x68,  0x65,  0x65,  0x6c,  0x00,  0x00,  0x86,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x6c,  0x58,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6c,  0x59,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x6c,  0x52,  0x7a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x72,  0x67,  0x6c,  0x53,  0x6c,  0x69,  0x64,  0x65, 
 0x72,  0x5f,  0x30,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x62,  0x75,  0x74,  0x74,  0x6f,  0x6e,  0x73,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x82,  0xc6,  0x0c, 
 0xe4,  0x12,  0xe7,  0x0d,  0x4d,  0x43,  0x78,  0x73,  0xdd,  0xc5,  0xc9,  0xf1,  0xaf,  0x2b,  0xf3,  0x5f, 
 0x7e,  0x10,  0xe0,  0x46,  0x3b,  0xe3,  0x5f,  0x4f,  0xdb,  0x08, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::steeringWheel>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xaf,  0x2b,  0xf3,  0x5f,  0x7e,  0x10,  0xe0,  0x46,  0x3b,  0xe3,  0x5f, 
 0x4f,  0xdb,  0x08,  0x00,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x82,  0xc6,  0x0c,  0xe4,  0x12,  0xe7,  0x0d,  0x4d,  0x43,  0x78,  0x73, 
 0xdd,  0xc5,  0xc9,  0x00,  0xba,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ControlData::steeringWheel>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::steeringWheel>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ControlData::steeringWheel)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::ControlData::steeringWheel>();

namespace {
  static const volatile propvec &properties___ControlData__steeringWheel = get_type_props<::ControlData::steeringWheel>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::steeringWheel& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lX()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lY()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.lRz()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.rglSlider_0()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.buttons()))
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::steeringWheel& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::steeringWheel>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_CONTROLDATA_HPP_7F732FB4553D99B56CE9F3E6F6780AE3
