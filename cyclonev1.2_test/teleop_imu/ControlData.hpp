/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: D:\codes\Cyclone_Version_Apps\cyclonev1.2_test\teleop_imu\ControlData.idl
  Source: ControlData.hpp
  Cyclone DDS: v0.11.0

*****************************************************************/
#ifndef DDSCXX_CONTROLDATA_HPP_C398D3366482ACF4684F1AECBBD80A2F
#define DDSCXX_CONTROLDATA_HPP_C398D3366482ACF4684F1AECBBD80A2F

#include <utility>
#include <ostream>
#include <vector>

namespace ControlData
{
class imu_data
{
private:
 std::vector<double> acc_;
 std::vector<double> gyro_;
 std::vector<double> angle_;
 std::vector<double> msg_;

public:
  imu_data() = default;

  explicit imu_data(
    const std::vector<double>& acc,
    const std::vector<double>& gyro,
    const std::vector<double>& angle,
    const std::vector<double>& msg) :
    acc_(acc),
    gyro_(gyro),
    angle_(angle),
    msg_(msg) { }

  const std::vector<double>& acc() const { return this->acc_; }
  std::vector<double>& acc() { return this->acc_; }
  void acc(const std::vector<double>& _val_) { this->acc_ = _val_; }
  void acc(std::vector<double>&& _val_) { this->acc_ = std::move(_val_); }
  const std::vector<double>& gyro() const { return this->gyro_; }
  std::vector<double>& gyro() { return this->gyro_; }
  void gyro(const std::vector<double>& _val_) { this->gyro_ = _val_; }
  void gyro(std::vector<double>&& _val_) { this->gyro_ = std::move(_val_); }
  const std::vector<double>& angle() const { return this->angle_; }
  std::vector<double>& angle() { return this->angle_; }
  void angle(const std::vector<double>& _val_) { this->angle_ = _val_; }
  void angle(std::vector<double>&& _val_) { this->angle_ = std::move(_val_); }
  const std::vector<double>& msg() const { return this->msg_; }
  std::vector<double>& msg() { return this->msg_; }
  void msg(const std::vector<double>& _val_) { this->msg_ = _val_; }
  void msg(std::vector<double>&& _val_) { this->msg_ = std::move(_val_); }

  bool operator==(const imu_data& _other) const
  {
    (void) _other;
    return acc_ == _other.acc_ &&
      gyro_ == _other.gyro_ &&
      angle_ == _other.angle_ &&
      msg_ == _other.msg_;
  }

  bool operator!=(const imu_data& _other) const
  {
    return !(*this == _other);
  }

};

std::ostream& operator<<(std::ostream& os, imu_data const& rhs);

} //namespace ControlData

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::ControlData::imu_data>::getTypeName()
{
  return "ControlData::imu_data";
}

template <> constexpr bool TopicTraits<::ControlData::imu_data>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::ControlData::imu_data>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPELIB
template<> constexpr unsigned int TopicTraits<::ControlData::imu_data>::type_map_blob_sz() { return 354; }
template<> constexpr unsigned int TopicTraits<::ControlData::imu_data>::type_info_blob_sz() { return 100; }
template<> inline const uint8_t * TopicTraits<::ControlData::imu_data>::type_map_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x7c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf1,  0x32,  0x1f,  0x74,  0x12,  0x4b,  0x16,  0xd5, 
 0x03,  0x85,  0x5f,  0x4d,  0x1d,  0x73,  0x66,  0x00,  0x64,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a, 
 0x16,  0x73,  0x44,  0x8e,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x03,  0x0a,  0x41,  0xe1,  0xdb,  0x58,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x89,  0x91,  0x86,  0xf7,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x6e,  0x2b,  0xaa,  0xf3, 
 0xb6,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0xf2,  0x03,  0x97,  0xb5,  0x18,  0x8a,  0xae,  0xd6, 
 0x56,  0xe6,  0x71,  0x78,  0x70,  0x41,  0x4c,  0x00,  0x9e,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x1e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x43,  0x6f,  0x6e,  0x74, 
 0x72,  0x6f,  0x6c,  0x44,  0x61,  0x74,  0x61,  0x3a,  0x3a,  0x69,  0x6d,  0x75,  0x5f,  0x64,  0x61,  0x74, 
 0x61,  0x00,  0x00,  0x00,  0x72,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x04,  0x00,  0x00,  0x00, 
 0x61,  0x63,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a,  0x05,  0x00,  0x00,  0x00,  0x67,  0x79,  0x72,  0x6f, 
 0x00,  0x00,  0x00,  0x00,  0x18,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x03,  0x0a,  0x06,  0x00,  0x00,  0x00,  0x61,  0x6e,  0x67,  0x6c,  0x65,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x03,  0x0a, 
 0x04,  0x00,  0x00,  0x00,  0x6d,  0x73,  0x67,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0xf2,  0x03,  0x97,  0xb5,  0x18,  0x8a,  0xae,  0xd6,  0x56,  0xe6,  0x71,  0x78, 
 0x70,  0x41,  0x4c,  0xf1,  0x32,  0x1f,  0x74,  0x12,  0x4b,  0x16,  0xd5,  0x03,  0x85,  0x5f,  0x4d,  0x1d, 
 0x73,  0x66, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::ControlData::imu_data>::type_info_blob() {
  alignas(4) static const uint8_t blob[] = {
 0x60,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x32,  0x1f,  0x74,  0x12,  0x4b,  0x16,  0xd5,  0x03,  0x85,  0x5f,  0x4d, 
 0x1d,  0x73,  0x66,  0x00,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x28,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x03,  0x97,  0xb5,  0x18,  0x8a,  0xae,  0xd6,  0x56,  0xe6,  0x71,  0x78, 
 0x70,  0x41,  0x4c,  0x00,  0xa2,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPELIB

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::ControlData::imu_data>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::ControlData::imu_data>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::ControlData::imu_data)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
const propvec &get_type_props<::ControlData::imu_data>();

namespace {
  static const volatile propvec &properties___ControlData__imu_data = get_type_props<::ControlData::imu_data>();
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::ControlData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.acc()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.gyro()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.angle()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::write_bound_exceeded))
        return false;
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.msg()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::ControlData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::write, key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::ControlData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.acc().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.acc()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.gyro().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.gyro()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.angle().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.angle()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::read_bound_exceeded))
        return false;
      if (!read(streamer, se_1))
        return false;
      instance.msg().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.msg()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::ControlData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::read, key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::ControlData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.acc().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.gyro().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.angle().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.msg().size());
      if (se_1 > 3 &&
          streamer.status(serialization_status::move_bound_exceeded))
        return false;
      if (!move(streamer, se_1))
        return false;
      
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::ControlData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::move, key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::ControlData::imu_data& instance, const entity_properties_t *props) {
  (void)instance;
  member_id_set member_ids;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 3;
      if (!max(streamer, se_1))
        return false;
      // coverity[dead_error_line]
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop, member_ids))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props, member_ids);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::ControlData::imu_data& instance, key_mode key) {
  const auto &props = get_type_props<::ControlData::imu_data>();
  str.set_mode(cdr_stream::stream_mode::max, key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_CONTROLDATA_HPP_C398D3366482ACF4684F1AECBBD80A2F
